(function() {
  var Test, assertion, execution, harness, name, util, _fn, _ref,
    __slice = Array.prototype.slice;

  util = require("util");

  Test = (function() {

    function Test(_expected) {
      this._expected = _expected;
      this._actual = 0;
      this._teardown = function() {};
      this._timeout();
      process.stdout.write("1.." + this._expected + "\n");
    }

    Test.prototype._comment = function(string) {
      var i, lines, _ref;
      lines = string.split(/\n/);
      for (i = 0, _ref = lines.length; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i++ : i--) {
        lines[i] = "# " + lines[i];
      }
      lines.push("");
      return process.stdout.write(lines.join("\n"));
    };

    Test.prototype._timeout = function() {
      var _this = this;
      if (this._timer) clearTimeout(this._timer);
      return setTimeout((function() {
        return _this.bailout("Timeout!");
      }), 30000);
    };

    Test.prototype.bailout = function(error) {
      var detail, lines, mesage, message;
      if (error instanceof Error) {
        mesage = error.message;
        detail = error.stack;
      } else if (error) {
        message = error.toString();
      }
      if (message != null) {
        lines = message.split(/\n/);
        if (lines.length > 1 && !(detail != null)) detail = message;
        message = "Bail out! " + lines[0] + "\n";
      } else {
        message = "Bail out!\n";
      }
      process.stdout.write(message);
      if (detail != null) this._comment(detail);
      return process.exit(1);
    };

    Test.prototype.say = function(object) {
      var inspection;
      inspection = util.inspect.call(util.inspect, object, false, 1024);
      return this._comment(inspection);
    };

    Test.prototype._end = function() {
      var teardown,
        _this = this;
      if (this._timer) clearTimeout(this._timer);
      if (this._teardown.length === 0) {
        teardown = this._teardown;
        this._teardown = function(callback) {
          teardown();
          return callback(null);
        };
      }
      try {
        return this._teardown(function(error) {
          if (error) {
            return _this._bailout(error);
          } else {
            return process.exit(_this._expected === _this._actual ? 0 : 1);
          }
        });
      } catch (error) {
        return this._bailout(error);
      }
    };

    return Test;

  })();

  _ref = require("assert");
  _fn = function(name, assertion) {
    return Test.prototype[name] = function() {
      var inspect, splat;
      splat = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._timeout();
      this._actual++;
      try {
        assertion.apply(this, splat);
        return process.stdout.write("ok " + this._actual + " " + splat[splat.length - 1] + "\n");
      } catch (e) {
        process.stdout.write("not ok " + this._actual + " " + e.message + "\n");
        if (assertion.length === 3) {
          inspect = {
            EXPECTED: splat[1],
            GOT: splat[0]
          };
          inspect = require("util").inspect(inspect, null, Math.MAX_VALUE);
          return this._comment(inspect);
        }
      }
    };
  };
  for (name in _ref) {
    assertion = _ref[name];
    _fn(name, assertion);
  }

  execution = function() {
    var callback, context, splat, test;
    test = arguments[0], splat = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (splat.length === 1) {
      callback = splat[0];
      try {
        if (callback.length === 1) {
          return callback.call(test, function(error) {
            if (error) {
              return test.bailout(error);
            } else {
              return test._end();
            }
          });
        } else {
          callback.call(test);
          return test._end();
        }
      } catch (error) {
        return test.bailout(error);
      }
    } else {
      context = splat[0], callback = splat[1];
      if (typeof context === "function") {
        try {
          return context(function(error, _context) {
            if (error) {
              return test.bailout(error);
            } else {
              return execution(test, _context, callback);
            }
          });
        } catch (error) {
          return test.bailout(error);
        }
      } else {
        try {
          return execution(test, function(_callback) {
            var teardown;
            if (teardown = context.$teardown) {
              delete context.$teardown;
              this._teardown = teardown;
            }
            if (callback.length === 2) {
              return callback.call(this, context, _callback);
            } else {
              callback.call(this, context);
              return _callback();
            }
          });
        } catch (error) {
          return test.bailout(error);
        }
      }
    }
  };

  module.exports = harness = function() {
    var callback, context, expected, splat;
    splat = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (splat.length === 1) {
      context = splat[0];
      return function(expected, callback) {
        return execution(new Test(expected), context, callback);
      };
    } else {
      expected = splat[0], callback = splat[1];
      return execution(new Test(expected), callback);
    }
  };

}).call(this);
